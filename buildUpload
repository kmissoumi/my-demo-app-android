#!/bin/bash

buildType="release"
metaData="output-metadata.json"

buildPath="build/outputs/apk/${buildType}"
[[ -d ${buildPath} ]] || buildPath="app/${buildPath}"
buildName="app-${buildType}.apk"

timeStamp=$(date +"%Y-%m-%d_%H%M%S_%s")
timeEpoch=$(date +%s)
scriptPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#quickSauceHome=$( echo "${scriptPath%/*}" )
#baseDir="${quickSauceHome}/data/api/storage/${timeStamp}"

# set default data centre, for EU use eu-central-1 
[[ -z ${SAUCE_DC} ]] && SAUCE_DC="us-west-1"
protoHost="https://api.${SAUCE_DC}.saucelabs.com"
userAuth="${SAUCE_USERNAME}:${SAUCE_ACCESS_KEY}"

function load_lib {
  f="${scriptPath}/quick-sauce-lib"
  [[ -f "${f}" ]] && source ${f}
}

load_lib

# last four commit subjects
releaseNotes=$(git --no-pager log -4 --pretty='format:%s')

# get the version from the output-metadata JSON file
versionName=$(jq --raw-output '.elements[].versionName' ${buildPath}/${metaData})

printf "\nUploading to TestFairy..."
# upload to TestFairy & Sauce Storage (HTTP 500 Messages w/ Sauce Storage)
r=$(curl https://app4.testfairy.com/api/upload \
        --silent --write-out "\n%{http_code}" \
        --form api_key="${TESTFAIRY_API_KEY}" \
        --form file=@"${buildPath}/${buildName}" \
        --form notify='on' \
        --form auto_update='on' \
        --form release_notes="${releaseNotes}" \
        --form tags='peanut, hamper' \
        --form upload_to_saucelabs='no')


testFairyUploadHttpStatus="${r##*$'\n'}"
testFairyUploadR="${r%????}"

[[ ${testFairyUploadHttpStatus} == "200" ]] && printf "%s\n" "Done!"


# check the response status & open a bowser on success
s=$(jq --raw-output '.status' <<< ${testFairyUploadR})
landingPageURL=$(jq --raw-output '.landing_page_url' <<< ${testFairyUploadR})

[[ ${testFairyUploadHttpStatus} != "200" ]] \
    && printf "%s %s\n" "Something went wrong. Upload Status Code:" ${testFairyUploadHttpStatus} \
    && log_json testFairyUploadR \
    && exit 127

log_debug_json testFairyUploadR

# avoid duplicate uploads
printf "Uploading to Sauce Storage..."
# check for environment variable if parameter is not provided
appFile="${buildPath}/${buildName}"
[[ ! -f ${appFile} ]] && printf "\nApp Not Found!. Provide the fully qualified path to an app as the 1st parameter.\n" && exit 2
[[ -z ${2} ]] && appName=${appFile##*/} || appName=${2}

appCheckSum=$(shasum -a 256 ${appFile} |cut -c 1-65)

# call the storage api
# ask jq to clean up mickey mouse response
storageQueryR=$(curl --silent --user ${userAuth} \
  --request GET "${protoHost}/v1/storage/files?sha256=${appCheckSum}" \
  | jq  '.items[]|del(.metadata.icon)')


[[ -n ${storageQueryR} ]] \
  && printf 'App found! Skipping upload.\n' \
  && fileId=$(jq --raw-output '.id' <<< ${storageQueryR}) \
  && skipSauceUpload="TRUE" \
  && log_debug_json storageQueryR



if [ "${skipSauceUpload}" != "TRUE" ]
  then
    r=$(curl --silent --user ${userAuth} \
      --write-out "\n%{http_code}" \
      --request POST ${protoHost}/v1/storage/upload \
      --form payload=@"${appFile}" \
      --form name="${appName}" \
      --form description="My Demo App")

    storageUploadHttpStatus="${r##*$'\n'}"
    storageUploadR=$(jq  '.item|del(.metadata.icon)' <<< "${r%????}")
    fileId=$(jq '.id' <<< ${storageUploadR})

    [[ ${storageUploadHttpStatus} == "201" ]] && printf "%s\n" "Done!"

    [[ ${storageUploadHttpStatus} != "201" ]] \
      && printf "%s %s\n" "NOTOK! Something wrong. HTTP status:" ${storageUploadHttpStatus} \
      && log_json storageUploadR \
      && exit 127
    
    log_debug_json storageUploadR
fi



[[ ${testFairyUploadHttpStatus} == "200" ]] \
    && printf "%s\n"              "TestFairy & Sauce Storage Tasks Finished AOK!" \
    && printf "\nhttps://%s"      "testfairy.saucelabs.com" \
    && printf "\nhttps://%s\n\n"  "app.saucelabs.com/live/app-testing" \
    && printf "%s=%s\n"           "fileId"            ${fileId} \
    && printf "\n%s\n%s\n"        "App Landing Page"  ${landingPageURL} \
    && exit 0


[[ ${autoOpen} ]] \
    && open -a 'Google Chrome' https://app.saucelabs.com/live/app-testing \
    && open -a 'Google Chrome' https://testfairy.saucelabs.com \
    && open -a 'Google Chrome' ${landingPageURL} \
